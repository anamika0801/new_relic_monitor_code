name: Disable New Relic Monitor

on:
  workflow_dispatch:
    inputs:
      monitor_guid:
        description: 'GUID of the monitor to disable'
        required: true
      account_id:
        description: 'New Relic Account ID'
        required: true
      # You can hardcode the API key name if it's always the same
      api_key_secret_name:
        description: 'GitHub Secret Name for New Relic API Key'
        required: false
        default: NEW_RELIC_API_KEY # Assuming your secret is named this

jobs:
  disable-monitor:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install JQ (if not available)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Disable Monitor via NerdGraph
        env:
          NR_API_KEY: ${{ secrets[github.event.inputs.api_key_secret_name] || secrets.NEW_RELIC_API_KEY }}
          MONITOR_GUID: ${{ github.event.inputs.monitor_guid }}
          ACCOUNT_ID: ${{ github.event.inputs.account_id }}
          NEW_STATUS: "DISABLED" # <-- Set the desired status
        
        run: |
          echo "ðŸ“´ Preparing to set monitor $MONITOR_GUID status to $NEW_STATUS..."

          if [ -z "$NR_API_KEY" ]; then
            echo "::error::New Relic API Key secret not found."
            exit 1
          fi

          # 1. Define the GraphQL Mutation
          # This mutation requires the GUID and the new status.
          MUTATION_PAYLOAD=$(jq -n \
            --arg guid "$MONITOR_GUID" \
            --arg new_status "$NEW_STATUS" \
            '{
              query: "mutation UpdateStatus($monitorGuid: EntityGuid!, $newStatus: SyntheticsMonitorStatus!) { syntheticsUpdateScriptApiMonitor(guid: $monitorGuid, monitor: { status: $newStatus }) { monitor { guid name status } errors { description type } } }",
              variables: { monitorGuid: $guid, newStatus: $new_status }
            }')

          # 2. Execute the Mutation using curl
          RESPONSE=$(curl -s -X POST https://api.newrelic.com/graphql \
            -H "Content-Type: application/json" \
            -H "API-Key: ${NR_API_KEY}" \
            --data-raw "$MUTATION_PAYLOAD")

          echo "ðŸ“¡ API Response: $RESPONSE"

          # 3. Check for Errors
          UPDATE_ERRORS=$(echo "$RESPONSE" | jq -r '.data.syntheticsUpdateScriptApiMonitor.errors[].description' | tr '\n' ' ')
          FINAL_STATUS=$(echo "$RESPONSE" | jq -r '.data.syntheticsUpdateScriptApiMonitor.monitor.status')

          if [ -n "$UPDATE_ERRORS" ] && [ "$UPDATE_ERRORS" != "null" ]; then
            echo "::error::Monitor disabling failed: $UPDATE_ERRORS"
            exit 1
          elif [ "$FINAL_STATUS" == "$NEW_STATUS" ]; then
            echo "âœ… Monitor $MONITOR_GUID successfully set to $NEW_STATUS."
          else
            echo "::error::Monitor disabling failed for unknown reason. Check API response."
            exit 1
          fi
